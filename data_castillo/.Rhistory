anti_join(claves_matcheadas, by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO"))
View(distritos_perdidos)
library(rio)
primera = import("primera_vuelta_2021.csv")
segunda = import("segunda_vuelta_2021.csv")
cifras = import("estado.xlsx")
primera$UBIGEO <- as.character(primera$UBIGEO)
primera$UBIGEO <- ifelse(nchar(primera$UBIGEO) == 5,
paste0("0", primera$UBIGEO),
primera$UBIGEO)
segunda$UBIGEO <- as.character(segunda$UBIGEO)
segunda$UBIGEO <- ifelse(nchar(segunda$UBIGEO) == 5,
paste0("0", segunda$UBIGEO),
segunda$UBIGEO)
library(dplyr)
segunda_agrupada <- segunda %>%
group_by(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
summarise(
votos_perulibre = sum(as.numeric(PERU_LIBRE), na.rm = TRUE),
votos_totales = sum(as.numeric(N_CVAS), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(segunda_castillo_porc = (votos_perulibre / votos_totales) * 100)
primera_agrupada <- primera %>%
group_by(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
summarise(
votos_perulibre = sum(as.numeric(PERU_LIBRE), na.rm = TRUE),
votos_totales = sum(as.numeric(N_CVAS), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(primera_castillo_porc = (votos_perulibre / votos_totales) * 100)
library(dplyr)
library(stringr)
library(tidyr)
# Extraer los 3 componentes sin depender de "Dpto.", "Prov.", "Dist."
cifras_limpia <- cifras %>%
mutate(
# Elimina etiquetas tipo 'Dpto.', 'Prov.' y 'Dist.' si existen
limpio = str_remove_all(`Nombre de Distrito`, "Dpto\\.|Prov\\.|Dist\\.") %>%
str_squish()
) %>%
separate(limpio, into = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO"), sep = "\\s{2,}", remove = FALSE) %>%
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), ~str_squish(str_to_upper(.)))) %>%
select(-limpio)
View(cifras)
View(cifras_limpia)
library(rio)
primera = import("primera_vuelta_2021.csv")
segunda = import("segunda_vuelta_2021.csv")
cifras = import("estado.xlsx")
primera$UBIGEO <- as.character(primera$UBIGEO)
primera$UBIGEO <- ifelse(nchar(primera$UBIGEO) == 5,
paste0("0", primera$UBIGEO),
primera$UBIGEO)
primera$UBIGEO <- as.character(primera$UBIGEO)
primera$UBIGEO <- ifelse(nchar(primera$UBIGEO) == 5,
paste0("0", primera$UBIGEO),
primera$UBIGEO)
segunda$UBIGEO <- as.character(segunda$UBIGEO)
segunda$UBIGEO <- ifelse(nchar(segunda$UBIGEO) == 5,
paste0("0", segunda$UBIGEO),
segunda$UBIGEO)
library(dplyr)
segunda_agrupada <- segunda %>%
group_by(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
summarise(
votos_perulibre = sum(as.numeric(PERU_LIBRE), na.rm = TRUE),
votos_totales = sum(as.numeric(N_CVAS), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(segunda_castillo_porc = (votos_perulibre / votos_totales) * 100)
primera_agrupada <- primera %>%
group_by(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
summarise(
votos_perulibre = sum(as.numeric(PERU_LIBRE), na.rm = TRUE),
votos_totales = sum(as.numeric(N_CVAS), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(primera_castillo_porc = (votos_perulibre / votos_totales) * 100)
library(dplyr)
library(stringr)
cifras_limpia <- cifras %>%
mutate(
# Usamos regex más tolerante, con fallback si falta alguno
DEPARTAMENTO = str_extract(`Nombre de Distrito`, "(?<=Dpto\\.\\s)[^P]+"),
PROVINCIA = str_extract(`Nombre de Distrito`, "(?<=Prov\\.\\s)[^D]+"),
DISTRITO = str_extract(`Nombre de Distrito`, "(?<=Dist\\.\\s).*")
) %>%
# Rellenamos DEPARTAMENTO si quedó NA usando estructura de 3 bloques
mutate(
# Si alguno quedó vacío, intentar separando manualmente en 3 bloques
fallback = str_remove_all(`Nombre de Distrito`, "Dpto\\.|Prov\\.|Dist\\.") %>% str_squish(),
.before = DEPARTAMENTO
) %>%
mutate(
DEPARTAMENTO = if_else(is.na(DEPARTAMENTO), str_split_fixed(fallback, "\\s{2,}", 3)[,1], DEPARTAMENTO),
PROVINCIA    = if_else(is.na(PROVINCIA),    str_split_fixed(fallback, "\\s{2,}", 3)[,2], PROVINCIA),
DISTRITO     = if_else(is.na(DISTRITO),     str_split_fixed(fallback, "\\s{2,}", 3)[,3], DISTRITO)
) %>%
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), ~ str_squish(str_to_upper(.)))) %>%
select(-fallback)
View(cifras_limpia)
library(rio)
primera = import("primera_vuelta_2021.csv")
segunda = import("segunda_vuelta_2021.csv")
cifras = import("estado.xlsx")
primera$UBIGEO <- as.character(primera$UBIGEO)
primera$UBIGEO <- ifelse(nchar(primera$UBIGEO) == 5,
paste0("0", primera$UBIGEO),
primera$UBIGEO)
segunda$UBIGEO <- as.character(segunda$UBIGEO)
segunda$UBIGEO <- ifelse(nchar(segunda$UBIGEO) == 5,
paste0("0", segunda$UBIGEO),
segunda$UBIGEO)
library(dplyr)
segunda_agrupada <- segunda %>%
group_by(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
summarise(
votos_perulibre = sum(as.numeric(PERU_LIBRE), na.rm = TRUE),
votos_totales = sum(as.numeric(N_CVAS), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(segunda_castillo_porc = (votos_perulibre / votos_totales) * 100)
primera_agrupada <- primera %>%
group_by(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
summarise(
votos_perulibre = sum(as.numeric(PERU_LIBRE), na.rm = TRUE),
votos_totales = sum(as.numeric(N_CVAS), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(primera_castillo_porc = (votos_perulibre / votos_totales) * 100)
library(dplyr)
library(stringr)
library(tidyr)
cifras_limpia <- cifras %>%
mutate(
# Detectamos si tiene el patrón con etiquetas
tiene_tags = str_detect(`Nombre de Distrito`, "Dpto\\.|Prov\\.|Dist\\.")
) %>%
# Separación condicional según patrón
mutate(
DEPARTAMENTO = case_when(
tiene_tags ~ str_extract(`Nombre de Distrito`, "(?<=Dpto\\.\\s)[^P]+"),
TRUE        ~ word(`Nombre de Distrito`, 1)
),
PROVINCIA = case_when(
tiene_tags ~ str_extract(`Nombre de Distrito`, "(?<=Prov\\.\\s)[^D]+"),
TRUE        ~ word(`Nombre de Distrito`, 2)
),
DISTRITO = case_when(
tiene_tags ~ str_extract(`Nombre de Distrito`, "(?<=Dist\\.\\s).*"),
TRUE        ~ word(`Nombre de Distrito`, 3)
)
) %>%
# Limpiar espacios y convertir a mayúsculas
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), ~ str_squish(str_to_upper(.)))) %>%
select(-tiene_tags)
View(cifras_limpia)
library(dplyr)
library(stringi)
# Función auxiliar para estandarizar texto
limpiar_texto <- function(x) {
x %>%
stri_trans_general("Latin-ASCII") %>%  # elimina tildes y caracteres raros
toupper() %>%                          # convierte a mayúsculas
str_squish()                           # elimina espacios extras
}
# Limpiar claves en cada base ANTES del merge
cifras_limpia <- cifras_limpia %>%
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), limpiar_texto))
primera_agrupada <- primera_agrupada %>%
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), limpiar_texto))
segunda_agrupada <- segunda_agrupada %>%
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), limpiar_texto))
cifras_limpia <- cifras_limpia %>%
select(-`Nombre de Distrito`)
# Merge entre primera y segunda vuelta
base_castillo <- primera_agrupada %>%
select(DEPARTAMENTO, PROVINCIA, DISTRITO, primera_castillo_porc) %>%
left_join(
segunda_agrupada %>%
select(DEPARTAMENTO, PROVINCIA, DISTRITO, segunda_castillo_porc),
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO")
)
# Merge con cifras
data_castillo <- base_castillo %>%
left_join(
cifras_limpia %>%
select(DEPARTAMENTO, PROVINCIA, DISTRITO,
redpub_porc, dni_porc, elec_porc,
salud_porc, edu_porc, trabajo_porc, diana),
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO")
) %>%
rename(cluster_diana = diana)
library(tidyr)
data_castillo_limpia <- drop_na(data_castillo)
no_match <- data_castillo %>%
filter(is.na(redpub_porc) | is.na(cluster_diana) | is.na(primera_castillo_porc) | is.na(segunda_castillo_porc))
no_match %>% select(DEPARTAMENTO, PROVINCIA, DISTRITO) %>% distinct()
library(fuzzyjoin)
library(dplyr)
# Asegurarte de que no hay NAs en las columnas clave
base_castillo_clean <- base_castillo %>%
filter(!is.na(DEPARTAMENTO) & !is.na(PROVINCIA) & !is.na(DISTRITO))
cifras_limpia_clean <- cifras_limpia %>%
filter(!is.na(DEPARTAMENTO) & !is.na(PROVINCIA) & !is.na(DISTRITO))
# Fuzzy join
data_castillo_fuzzy <- base_castillo_clean %>%
stringdist_left_join(
cifras_limpia_clean,
by = c("DEPARTAMENTO" = "DEPARTAMENTO",
"PROVINCIA" = "PROVINCIA",
"DISTRITO" = "DISTRITO"),
method = "lv",
max_dist = 1,  # Puedes ajustar esto
distance_col = "distancia"
)
fuzzy_limpia <- data_castillo_fuzzy %>%
select(
UBIGEO = Ubigeo,
DEPARTAMENTO = DEPARTAMENTO.x,
PROVINCIA = PROVINCIA.x,
DISTRITO = DISTRITO.x,
primera_castillo_porc,
segunda_castillo_porc,
redpub_porc,
dni_porc,
elec_porc,
salud_porc,
edu_porc,
trabajo_porc,
cluster_diana = diana
)
View(fuzzy_limpia)
View(cifras)
View(cifras_limpia)
View(fuzzy_limpia)
View(data_castillo_fuzzy)
View(cifras_limpia)
View(cifras)
sina_fuzzy_limpia <- fuzzy_limpia %>%
drop_na()
View(sina_fuzzy_limpia)
View(sina_fuzzy_limpia)
distritos_perdidos <- cifras_limpia %>%
select(DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
distinct() %>%
anti_join(claves_matcheadas, by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO"))
claves_matcheadas <- bind_rows(
data_castillo_limpia %>% select(DEPARTAMENTO, PROVINCIA, DISTRITO),
fuzzy_limpia %>% select(DEPARTAMENTO, PROVINCIA, DISTRITO)
) %>% distinct()
distritos_perdidos <- cifras_limpia %>%
select(DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
distinct() %>%
anti_join(claves_matcheadas, by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO"))
View(distritos_perdidos)
match_por_ubigeo <- distritos_perdidos %>%
inner_join(data_castillo %>% select(UBIGEO, primera_castillo_porc, segunda_castillo_porc),
by = "UBIGEO")
cifras_sin_match <- cifras_limpia %>%
anti_join(match_por_nombre, by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO"))
# Merge original por nombre
match_por_nombre <- data_castillo %>%
filter(!is.na(redpub_porc))  # o puedes usar otra variable clave
cifras_sin_match <- cifras_limpia %>%
anti_join(match_por_nombre, by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO"))
match_por_ubigeo <- cifras_sin_match %>%
inner_join(data_castillo %>% select(UBIGEO, primera_castillo_porc, segunda_castillo_porc),
by = "UBIGEO")
View(cifras_sin_match)
match_por_ubigeo <- cifras_sin_match %>%
inner_join(data_castillo %>% select(UBIGEO, primera_castillo_porc, segunda_castillo_porc),
by = "Ubigeo")
View(data_castillo)
library(rio)
primera = import("primera_vuelta_2021.csv")
library(rio)
primera = import("primera_vuelta_2021.csv")
segunda = import("segunda_vuelta_2021.csv")
cifras = import("estado.xlsx")
primera$UBIGEO <- as.character(primera$UBIGEO)
primera$UBIGEO <- ifelse(nchar(primera$UBIGEO) == 5,
paste0("0", primera$UBIGEO),
primera$UBIGEO)
segunda$UBIGEO <- as.character(segunda$UBIGEO)
segunda$UBIGEO <- ifelse(nchar(segunda$UBIGEO) == 5,
paste0("0", segunda$UBIGEO),
segunda$UBIGEO)
library(dplyr)
segunda_agrupada <- segunda %>%
group_by(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
summarise(
votos_perulibre = sum(as.numeric(PERU_LIBRE), na.rm = TRUE),
votos_totales = sum(as.numeric(N_CVAS), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(segunda_castillo_porc = (votos_perulibre / votos_totales) * 100)
primera_agrupada <- primera %>%
group_by(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO) %>%
summarise(
votos_perulibre = sum(as.numeric(PERU_LIBRE), na.rm = TRUE),
votos_totales = sum(as.numeric(N_CVAS), na.rm = TRUE),
.groups = "drop"
) %>%
mutate(primera_castillo_porc = (votos_perulibre / votos_totales) * 100)
library(dplyr)
library(stringr)
library(tidyr)
cifras_limpia <- cifras %>%
mutate(
# Detectamos si tiene el patrón con etiquetas
tiene_tags = str_detect(`Nombre de Distrito`, "Dpto\\.|Prov\\.|Dist\\.")
) %>%
# Separación condicional según patrón
mutate(
DEPARTAMENTO = case_when(
tiene_tags ~ str_extract(`Nombre de Distrito`, "(?<=Dpto\\.\\s)[^P]+"),
TRUE        ~ word(`Nombre de Distrito`, 1)
),
PROVINCIA = case_when(
tiene_tags ~ str_extract(`Nombre de Distrito`, "(?<=Prov\\.\\s)[^D]+"),
TRUE        ~ word(`Nombre de Distrito`, 2)
),
DISTRITO = case_when(
tiene_tags ~ str_extract(`Nombre de Distrito`, "(?<=Dist\\.\\s).*"),
TRUE        ~ word(`Nombre de Distrito`, 3)
)
) %>%
# Limpiar espacios y convertir a mayúsculas
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), ~ str_squish(str_to_upper(.)))) %>%
select(-tiene_tags)
library(dplyr)
library(stringi)
# Función auxiliar para estandarizar texto
limpiar_texto <- function(x) {
x %>%
stri_trans_general("Latin-ASCII") %>%  # elimina tildes y caracteres raros
toupper() %>%                          # convierte a mayúsculas
str_squish()                           # elimina espacios extras
}
# Limpiar claves en cada base ANTES del merge
cifras_limpia <- cifras_limpia %>%
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), limpiar_texto))
primera_agrupada <- primera_agrupada %>%
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), limpiar_texto))
segunda_agrupada <- segunda_agrupada %>%
mutate(across(c(DEPARTAMENTO, PROVINCIA, DISTRITO), limpiar_texto))
cifras_limpia <- cifras_limpia %>%
select(-`Nombre de Distrito`)
cifras_limpia <- cifras_limpia %>%
select(-`Nombre de Distrito`)
# Merge entre primera y segunda vuelta
base_castillo <- primera_agrupada %>%
select(UBIGEO,DEPARTAMENTO, PROVINCIA, DISTRITO, primera_castillo_porc) %>%
left_join(
segunda_agrupada %>%
select(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO, segunda_castillo_porc),
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO")
)
# Merge con cifras
data_castillo <- base_castillo %>%
left_join(
cifras_limpia %>%
select(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO,
redpub_porc, dni_porc, elec_porc,
salud_porc, edu_porc, trabajo_porc, diana),
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO")
) %>%
rename(cluster_diana = diana)
# Merge entre primera y segunda vuelta
base_castillo <- primera_agrupada %>%
select(UBIGEO,DEPARTAMENTO, PROVINCIA, DISTRITO, primera_castillo_porc) %>%
left_join(
segunda_agrupada %>%
select(UBIGEO, DEPARTAMENTO, PROVINCIA, DISTRITO, segunda_castillo_porc),
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO")
)
# Merge con cifras
data_castillo <- base_castillo %>%
left_join(
cifras_limpia %>%
select(DEPARTAMENTO, PROVINCIA, DISTRITO,
redpub_porc, dni_porc, elec_porc,
salud_porc, edu_porc, trabajo_porc, diana),
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO")
) %>%
rename(cluster_diana = diana)
View(data_castillo)
no_match <- data_castillo %>%
filter(is.na(redpub_porc) | is.na(cluster_diana) | is.na(primera_castillo_porc) | is.na(segunda_castillo_porc))
no_match %>% select(DEPARTAMENTO, PROVINCIA, DISTRITO) %>% distinct()
View(data_castillo)
str(data_castillo)
library(dplyr)
library(stringr)
library(fuzzyjoin)
# 1. Primer intento: merge exacto por nombres
data_merge_1 <- base_castillo %>%
left_join(
cifras_limpia,
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO")
)
# Identificar casos no emparejados
no_match_1 <- data_merge_1 %>%
filter(is.na(redpub_porc)) %>%
select(UBIGEO.x, DEPARTAMENTO, PROVINCIA, DISTRITO,
primera_castillo_porc, segunda_castillo_porc)
# 2. Segundo intento: fuzzy merge por nombres
data_merge_2 <- no_match_1 %>%
stringdist_left_join(
cifras_limpia,
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO"),
method = "lv", max_dist = 1, distance_col = NULL
)
library(dplyr)
library(stringr)
library(fuzzyjoin)
# 1. Primer intento: merge exacto por nombres
data_merge_1 <- base_castillo %>%
left_join(
cifras_limpia,
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO")
)
# Filtra filas sin NA en claves antes del fuzzy merge
no_match_1_fuzzy <- no_match_1 %>%
filter(!is.na(DEPARTAMENTO), !is.na(PROVINCIA), !is.na(DISTRITO))
cifras_limpia_fuzzy <- cifras_limpia %>%
filter(!is.na(DEPARTAMENTO), !is.na(PROVINCIA), !is.na(DISTRITO))
# Fuzzy join solo con casos sin NA
data_merge_2 <- no_match_1_fuzzy %>%
stringdist_left_join(
cifras_limpia_fuzzy,
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO"),
method = "lv",
max_dist = 1,
distance_col = NULL
)
# 3. Tercer intento: exacto por UBIGEO
no_match_2 <- anti_join(no_match_1, data_merge_2,
by = c("UBIGEO.x" = "UBIGEO"))
View(base_castillo)
library(dplyr)
library(fuzzyjoin)
library(stringr)
# 1. MERGE EXACTO POR NOMBRES -----------------------------------------
data_merge_1 <- base_castillo %>%
left_join(
cifras_limpia,
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO")
) %>%
mutate(origen_match = "exacto_nombre")
# 2. IDENTIFICAR NO EMPAREJADOS ---------------------------------------
no_match_1 <- data_merge_1 %>%
filter(is.na(redpub_porc)) %>%
select(UBIGEO.x, DEPARTAMENTO, PROVINCIA, DISTRITO,
primera_castillo_porc, segunda_castillo_porc)
# Filtrar NA para evitar errores en fuzzy
no_match_1_fuzzy <- no_match_1 %>%
filter(!is.na(DEPARTAMENTO), !is.na(PROVINCIA), !is.na(DISTRITO))
cifras_limpia_fuzzy <- cifras_limpia %>%
filter(!is.na(DEPARTAMENTO), !is.na(PROVINCIA), !is.na(DISTRITO))
# 3. FUZZY MERGE POR NOMBRES ------------------------------------------
data_merge_2 <- no_match_1_fuzzy %>%
stringdist_left_join(
cifras_limpia_fuzzy,
by = c("DEPARTAMENTO", "PROVINCIA", "DISTRITO"),
method = "lv", max_dist = 1, distance_col = NULL
) %>%
mutate(origen_match = "fuzzy_nombre",
UBIGEO.x = coalesce(UBIGEO.x, UBIGEO))  # asegurar columna clave
library(fuzzyjoin)
library(dplyr)
# Asegurarte de que no hay NAs en las columnas clave
base_castillo_clean <- base_castillo %>%
filter(!is.na(DEPARTAMENTO) & !is.na(PROVINCIA) & !is.na(DISTRITO))
cifras_limpia_clean <- cifras_limpia %>%
filter(!is.na(DEPARTAMENTO) & !is.na(PROVINCIA) & !is.na(DISTRITO))
# Fuzzy join
data_castillo_fuzzy <- base_castillo_clean %>%
stringdist_left_join(
cifras_limpia_clean,
by = c("DEPARTAMENTO" = "DEPARTAMENTO",
"PROVINCIA" = "PROVINCIA",
"DISTRITO" = "DISTRITO"),
method = "lv",
max_dist = 1,  # Puedes ajustar esto
distance_col = "distancia"
)
fuzzy_limpia <- data_castillo_fuzzy %>%
select(
UBIGEO = Ubigeo,
DEPARTAMENTO = DEPARTAMENTO.x,
PROVINCIA = PROVINCIA.x,
DISTRITO = DISTRITO.x,
primera_castillo_porc,
segunda_castillo_porc,
redpub_porc,
dni_porc,
elec_porc,
salud_porc,
edu_porc,
trabajo_porc,
cluster_diana = diana
)
View(fuzzy_limpia)
sina_fuzzy_limpia <- fuzzy_limpia %>%
drop_na()
write_xlsx(fuzzy_limpia, path = "castillo_votacion.xlsx")
```{r}
write_xlsx(fuzzy_limpia, path = "castillo_votacion.xlsx")
write_xlsx(sina_fuzzy_limpia, path = "castillo_votacion_sina.xlsx")
